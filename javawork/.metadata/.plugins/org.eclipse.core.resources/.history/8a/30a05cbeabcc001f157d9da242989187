package day0107db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.mysql.cj.xdevapi.Result;

import db.connect.MysqlConnect;

public class FoodModel {
	MysqlConnect connect = new MysqlConnect();

	// insert 메서드
	public void foodMenuInsert(String foodName, int foodPrice, String foodSize) {
		Connection conn = connect.getConnection();
		PreparedStatement pstmt = null;
		String sql = "insert into foodrest (foodname,foodprice,foodsize) values (?,?,?)";
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, foodName);
			pstmt.setInt(2, foodPrice);
			pstmt.setString(3, foodSize);
			pstmt.execute();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			connect.dbClose(pstmt, conn);
		}

	}

	// 전체 메뉴 반환 메서드
	public List<Vector<String>> getAllMenus() {
		List<Vector<String>> list = new Vector<Vector<String>>();
		Connection conn = connect.getConnection();
		PreparedStatement pstmt= null;
		ResultSet rs = null;

		String sql="select * from foodrest order by num";

		try {
			pstmt=conn.prepareStatement(sql);
			rs=pstmt.executeQuery();
			while(rs.next()) {
				Vector<String> data = new Vector<String>();
				data.add(String.valueOf(rs.getInt("num")));
				data.add(rs.getString("foodname"));
				data.add(String.valueOf(rs.getInt("foodprice")));
				data.add(rs.getString("foodsize"));

				list.add(data);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			connect.dbClose(rs, pstmt, conn);
		}


		return list;
	}

	// 예약 insert
	public void foodOrderInsert(FoodOrderDto dto) {
		Connection conn = connect.getConnection();
		PreparedStatement pstmt = null;
		String sql = "insert into foodorder (num,ordername,ordercnt,bookingday) values (?,?,?,?)";
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setInt(1, dto.getNum());
			pstmt.setString(2, dto.getOrderName());
			pstmt.setInt(3, dto.getOrderCnt());
			pstmt.setString(4, dto.getBookingDay());
			pstmt.execute();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			connect.dbClose(pstmt, conn);
		}

	}

	// 예약 select
	public List<Vector<String>> getAllOrders() {
		List<Vector<String>> list = new Vector<Vector<String>>();
		Connection conn = connect.getConnection();
		PreparedStatement pstmt= null;
		ResultSet rs = null;

		String sql="""
				select
					idx,ordername,foodname,foodprice,foodsize,ordercnt,bookingday
				from foodrest fr, foodorder fo
				where fr.num=fo.num
				""";

		try {
			pstmt=conn.prepareStatement(sql);
			rs=pstmt.executeQuery();
			while(rs.next()) {
				Vector<String> data = new Vector<String>();
				data.add(String.valueOf(rs.getInt("idx")));
				data.add(rs.getString("ordername"));
				data.add(rs.getString("foodname"));
				data.add(String.valueOf(rs.getInt("foodprice")));
				data.add(rs.getString("foodsize"));
				data.add(String.valueOf(rs.getInt("orderCnt")));
				data.add(rs.getString("bookingDay"));

				list.add(data);
			}
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			connect.dbClose(rs, pstmt, conn);
		}


		return list;
	}

	// 등록 메뉴 삭제
	public void deleteFoodMenu(int num) {
		Connection conn = connect.getConnection();
		PreparedStatement pstmt = null;
		String sql = "delete from foodrest where num = ?";
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setInt(1, num);
			pstmt.execute();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			connect.dbClose(pstmt, conn);
		}
	}
}
